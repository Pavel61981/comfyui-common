import math


class FloatOperation:
    """
    –ù–æ–¥–∞ "Float Operation" ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥–≤—É–º—è —á–∏—Å–ª–∞–º–∏ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏ –∏ —Ç.–¥.).

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
    - –û–ø–µ—Ä–∞—Ü–∏—è "//" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–π –∫ float (—Å –æ—Ç–±—Ä–æ—à–µ–Ω–Ω–æ–π –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç—å—é).
    - –û–ø–µ—Ä–∞—Ü–∏—è "average" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è.
    - –û–ø–µ—Ä–∞—Ü–∏—è "pow" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è —Å –Ω–µ—Ü–µ–ª—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏ (–≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É).
    - –û–ø–µ—Ä–∞—Ü–∏—è "sum" —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º –¥–ª—è "+".
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Input_A": (  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
                    "FLOAT",
                    {"default": 0.0, "step": 0.01, "tooltip": "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ"},
                ),
                "Input_B": (  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
                    "FLOAT",
                    {"default": 0.0, "step": 0.01, "tooltip": "–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ"},
                ),
                "Operation": (
                    [
                        "+",
                        "-",
                        "*",
                        "/",
                        "%",
                        "//",
                        "max",
                        "min",
                        "sum",
                        "average",
                        "pow",
                        "hypot",
                    ],
                    {"default": "+", "tooltip": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"},
                ),
            }
        }

    RETURN_TYPES = ("FLOAT",)
    FUNCTION = "execute"
    CATEGORY = "utils/math"
    OUTPUT_NODE = False

    def execute(self, Input_A, Input_B, Operation):
        try:
            if Operation == "+":
                result = Input_A + Input_B
            elif Operation == "-":
                result = Input_A - Input_B
            elif Operation == "*":
                result = Input_A * Input_B
            elif Operation == "/":
                if Input_B == 0.0:
                    raise ZeroDivisionError("Division by zero in '/' operation")
                result = Input_A / Input_B
            elif Operation == "%":
                if Input_B == 0.0:
                    raise ZeroDivisionError("Division by zero in '%' operation")
                result = Input_A % Input_B
            elif Operation == "//":
                if Input_B == 0.0:
                    raise ZeroDivisionError("Division by zero in '//' operation")
                result = float(math.trunc(Input_A / Input_B))  # ‚Üê –£–ø—Ä–æ—â–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            elif Operation == "max":
                result = max(Input_A, Input_B)
            elif Operation == "min":
                result = min(Input_A, Input_B)
            elif Operation == "sum":
                result = Input_A + Input_B  # –ê–ª–∏–∞—Å –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è
            elif Operation == "average":
                result = (Input_A + Input_B) / 2.0
            elif Operation == "pow":
                if Input_A == 0.0 and Input_B < 0:
                    raise ValueError("0 cannot be raised to a negative power")
                if Input_A < 0 and not Input_B.is_integer():
                    raise ValueError(
                        "Negative base with fractional exponent is not real"
                    )
                result = Input_A**Input_B
                if not math.isfinite(result):
                    raise OverflowError("Result too large (overflow)")
            elif Operation == "hypot":
                result = math.hypot(Input_A, Input_B)
            else:
                raise ValueError(f"Unknown operation: {Operation}")

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not math.isfinite(result):
                raise ValueError("Result is NaN or Inf")

            return (result,)

        except (ZeroDivisionError, ValueError, OverflowError) as e:
            error_msg = f"[Float Operation] Error: {str(e)}"
            print(error_msg)
            raise RuntimeError(error_msg) from e
        except Exception as e:
            error_msg = f"[Float Operation] Unexpected error: {str(e)}"
            print(error_msg)
            raise RuntimeError(error_msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
NODE_CLASS_MAPPINGS = {"FloatOperation": FloatOperation}
NODE_DISPLAY_NAME_MAPPINGS = {"FloatOperation": "üßÆ Float Operation"}
