# filename: image_tile_planner.py
import math


class ImageIntTilePlanner:
    """
    –ù–æ–¥–∞ 'Image Tile Planner' ‚Äî —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç:
      - —Ä–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞ (Tile_Size), –∫—Ä–∞—Ç–Ω—ã–π 64,
      - —à–∞–≥ (Tile_Stride) = –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø—Ä–æ–ø–æ—Ä—Ü–∏—è –æ—Ç Tile_Size ("3 / 4" –∏–ª–∏ "1 / 2"),
        –æ–∫—Ä—É–≥–ª—ë–Ω –≤–Ω–∏–∑ –¥–æ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 64, –º–∏–Ω–∏–º—É–º 64,
      - —Ñ–ª–∞–≥ Use_Tiles = (max(H, W) > Start_Tiling_At),
      - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –ø–æ —à–∏—Ä–∏–Ω–µ/–≤—ã—Å–æ—Ç–µ (Tiles_X/Tiles_Y) –≤ —Ä–µ–∂–∏–º–µ 'cover':
        –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–π–ª —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è –∫ –≥—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –≤—Å—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    –ü–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ ‚Äî –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤–µ—Å—å –±–∞—Ç—á) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Image": ("IMAGE",),
                "Max_Tile_Size": ("INT", {"default": 1024, "min": 64, "step": 64}),
                "Start_Tiling_At": ("INT", {"default": 2048, "min": 64, "step": 64}),
                "Stride_Ratio": (["3 / 4", "1 / 2"],),
            }
        }

    RETURN_TYPES = ("IMAGE", "INT", "INT", "BOOLEAN", "INT", "INT")
    RETURN_NAMES = (
        "Image",
        "Tile_Size",
        "Tile_Stride",
        "Use_Tiles",
        "Tiles_X",
        "Tiles_Y",
    )
    FUNCTION = "execute"
    CATEGORY = "utils/tiling"
    OUTPUT_NODE = False

    @staticmethod
    def _round_down_multiple(value: int, base: int) -> int:
        """–û–∫—Ä—É–≥–ª—è–µ—Ç –≤–Ω–∏–∑ –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ base."""
        return (value // base) * base

    @staticmethod
    def _validate_and_fix_params(max_tile_size: int, start_tiling_at: int):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã 64 –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."""
        if max_tile_size < 64:
            print("[Image Tile Planner] Warning: Max_Tile_Size < 64; corrected to 64.")
            max_tile_size = 64
        if start_tiling_at < 64:
            print(
                "[Image Tile Planner] Warning: Start_Tiling_At < 64; corrected to 64."
            )
            start_tiling_at = 64
        return max_tile_size, start_tiling_at

    @staticmethod
    def _parse_stride_ratio(ratio_choice: str):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '3 / 4' –∏–ª–∏ '1 / 2' –≤ —á–∏—Å–ª–∏—Ç–µ–ª—å –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (3,4) –∏–ª–∏ (1,2). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî (3,4) —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º.
        """
        if not isinstance(ratio_choice, str):
            print(
                "[Image Tile Planner] Warning: Stride_Ratio is not a string; defaulting to '3 / 4'."
            )
            return 3, 4
        normalized = ratio_choice.replace(" ", "")
        mapping = {
            "3/4": (3, 4),
            "1/2": (1, 2),
        }
        if normalized in mapping:
            return mapping[normalized]
        print(
            f"[Image Tile Planner] Warning: Unsupported Stride_Ratio '{ratio_choice}'; defaulting to '3 / 4'."
        )
        return 3, 4

    @staticmethod
    def _tiles_cover_count(dim: int, tile: int, stride: int) -> int:
        """
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è dim —Ç–∞–π–ª–æ–º —Ä–∞–∑–º–µ—Ä–∞ tile
        –ø—Ä–∏ –±–∞–∑–æ–≤–æ–º —à–∞–≥–µ stride (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ stride).
        –§–æ—Ä–º—É–ª–∞: max(1, ceil((dim - tile) / stride) + 1), –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ tile <= dim –∏ stride >= 1.
        """
        remainder = dim - tile
        if remainder <= 0:
            return 1
        return max(1, math.ceil(remainder / stride) + 1)

    def execute(
        self, Image, Max_Tile_Size: int, Start_Tiling_At: int, Stride_Ratio: str
    ):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        (Image, Tile_Size, Tile_Stride, Use_Tiles, Tiles_X, Tiles_Y)
        """
        try:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            Max_Tile_Size, Start_Tiling_At = self._validate_and_fix_params(
                int(Max_Tile_Size), int(Start_Tiling_At)
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if Image is None:
                raise RuntimeError("[Image Tile Planner] Image is None.")
            if not hasattr(Image, "shape"):
                raise RuntimeError(
                    "[Image Tile Planner] Unsupported image type: no .shape attribute."
                )

            shape = Image.shape  # –æ–∂–∏–¥–∞–µ—Ç—Å—è [B, H, W, C]
            if len(shape) != 4:
                raise RuntimeError(
                    f"[Image Tile Planner] Expected image shape [B,H,W,C], got {shape}."
                )

            _, H, W, C = shape
            if C not in (3, 4):
                print(
                    f"[Image Tile Planner] Warning: channel count is {C}, expected 3 or 4."
                )

            if H < 64 or W < 64:
                raise RuntimeError(
                    f"[Image Tile Planner] Image is too small for tiling rules: H={H}, W={W} (need >=64)."
                )

            # –†–∞–∑–º–µ—Ä—ã
            min_dim = H if H < W else W
            max_dim = H if H > W else W

            # –†–∞–∑–º–µ—Ä —Ç–∞–π–ª–∞
            candidate = min(min_dim, Max_Tile_Size)
            tile_size = self._round_down_multiple(int(candidate), 64)
            if tile_size < 64:
                raise RuntimeError(
                    f"[Image Tile Planner] Computed tile size < 64 (got {tile_size}). "
                    f"Check inputs: min_dim={min_dim}, Max_Tile_Size={Max_Tile_Size}."
                )

            # –ü—Ä–æ–ø–æ—Ä—Ü–∏—è —à–∞–≥–∞
            num, den = self._parse_stride_ratio(Stride_Ratio)

            # –®–∞–≥ —Ç–∞–π–ª–∞ (stride)
            stride_base = int(tile_size * num / den)
            stride = self._round_down_multiple(stride_base, 64)
            if stride < 64:
                stride = 64

            # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–π–ª–æ–≤
            use_tiles = bool(max_dim > Start_Tiling_At)

            # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–π–ª–æ–≤ (—Ä–µ–∂–∏–º cover, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç use_tiles)
            tiles_x = self._tiles_cover_count(int(W), int(tile_size), int(stride))
            tiles_y = self._tiles_cover_count(int(H), int(tile_size), int(stride))

            # –í–æ–∑–≤—Ä–∞—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫
            return (
                Image,
                int(tile_size),
                int(stride),
                bool(use_tiles),
                int(tiles_x),
                int(tiles_y),
            )

        except RuntimeError:
            raise
        except Exception as e:
            msg = f"[Image Tile Planner] Unexpected error: {type(e).__name__}: {str(e)}"
            print(msg)
            raise RuntimeError(msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"ImageIntTilePlanner": ImageIntTilePlanner}
NODE_DISPLAY_NAME_MAPPINGS = {"ImageIntTilePlanner": "üß© Image Tile Planner"}
