# file: string_text_file_loader.py
import os


class StringTextFileLoader:
    """
    –ù–æ–¥–∞ "StringTextFileLoader" ‚Äî —á–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª UTF-8, –ø—É—Ç—å —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑:
    Directory + Filename + Extension. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å—Ç—Ä–æ–∫–æ–π.
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Directory": ("STRING", {"default": "", "placeholder": "/path/to/dir"}),
                "Filename": (
                    "STRING",
                    {"default": "", "placeholder": "file_name_without_ext"},
                ),
                "Extension": ("STRING", {"default": "txt", "placeholder": "txt"}),
            }
        }

    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("Text",)
    FUNCTION = "execute"
    CATEGORY = "io/text"
    OUTPUT_NODE = False

    @staticmethod
    def _validate_name_component(name: str, field: str):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Filename/Extension: –∑–∞–ø—Ä–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –ø—É—Ç–∏ –∏ '..'.
        """
        if name is None:
            raise RuntimeError(
                f"[StringTextFileLoader] –ü–æ–ª–µ '{field}' –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
            )
        forbidden = ["..", "/", "\\"]
        sep = os.sep
        altsep = os.altsep if os.altsep else None
        for token in forbidden + ([sep] if sep else []) + ([altsep] if altsep else []):
            if token and token in name:
                raise RuntimeError(
                    f"[StringTextFileLoader] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª/–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ '{field}': '{token}'."
                )
        if name.strip() == "":
            raise RuntimeError(
                f"[StringTextFileLoader] –ü–æ–ª–µ '{field}' –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π."
            )

    def execute(self, Directory: str, Filename: str, Extension: str):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—Ç—å –∏ —á–∏—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8.
        –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç RuntimeError.
        """
        try:
            filename = (Filename or "").strip()
            ext = (Extension or "").strip().lower()
            if ext.startswith("."):
                ext = ext[1:]

            self._validate_name_component(filename, "Filename")
            self._validate_name_component(ext, "Extension")

            path = os.path.join(Directory, f"{filename}.{ext}")

            if not os.path.exists(path):
                raise RuntimeError(f"[StringTextFileLoader] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            if not os.path.isfile(path):
                raise RuntimeError(
                    f"[StringTextFileLoader] –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {path}"
                )

            with open(path, "r", encoding="utf-8") as f:
                text = f.read()

            return (text,)

        except RuntimeError:
            raise
        except Exception as e:
            msg = f"[StringTextFileLoader] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
            print(msg)
            raise RuntimeError(msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {
    "StringTextFileLoader": StringTextFileLoader,
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "StringTextFileLoader": "üß© Load Text File",
}
