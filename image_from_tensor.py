# image_ensure_rgb.py

from typing import Tuple
import math

try:
    import torch
except Exception as e:  # pragma: no cover
    raise RuntimeError("[ImageEnsureRGB] PyTorch is not available") from e


class ImageEnsureRGB:
    """
    –ù–æ–¥–∞ ¬´ImageEnsureRGB¬ª:
    –ü—Ä–∏–≤–æ–¥–∏—Ç –≤—Ö–æ–¥–Ω–æ–π IMAGE –∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É ComfyUI:
    - —Ñ–æ—Ä–º–∞: [B, H, W, 3] (BHWC)
    - dtype: float32
    - –¥–∏–∞–ø–∞–∑–æ–Ω: [0..1] (–∏—Å–∫–ª—é—á–∞—è —Ä–µ–∂–∏–º normalize='none')
    –ï—Å–ª–∏ –≤—Ö–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ RGBA (C==4), –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∞–ª—å—Ñ—É –≤ MASK (–∏–ª–∏ –ø—Ä–µ–º—É–ª—å—Ç–∏–ø–ª–∏—Ü–∏—Ä—É–µ—Ç / –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏).
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Image": ("IMAGE",),
                "alpha_strategy": (
                    ["to_mask", "premultiply", "drop"],
                    {"default": "to_mask"},
                ),
                "normalize": (
                    ["auto_255", "clip_only", "none"],
                    {"default": "auto_255"},
                ),
                "nan_inf_policy": (
                    ["clean", "error"],
                    {"default": "clean"},
                ),
            }
        }

    RETURN_TYPES = ("IMAGE", "MASK")
    RETURN_NAMES = ("Image", "Mask")
    FUNCTION = "execute"
    CATEGORY = "utils/image"
    OUTPUT_NODE = False

    # ---------- helpers ----------

    @staticmethod
    def _finite_minmax(x: torch.Tensor) -> Tuple[float, float]:
        finite = torch.isfinite(x)
        if not finite.any():
            return float("nan"), float("nan")
        vals = x[finite]
        return float(vals.min().item()), float(vals.max().item())

    @staticmethod
    def _p99(x: torch.Tensor) -> float:
        """–ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å 99 –ø–æ –∫–æ–Ω–µ—á–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º; NaN/Inf –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –ø–æ—á–∏—â–µ–Ω—ã)."""
        finite = torch.isfinite(x)
        if not finite.any():
            return float("nan")
        try:
            q = torch.quantile(x[finite], 0.99)
            return float(q.item())
        except Exception:
            # –§–æ–ª–±—ç–∫: –±–µ—Ä—ë–º max, –µ—Å–ª–∏ quantile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            return float(x[finite].max().item())

    @staticmethod
    def _ensure_bhwc(image: torch.Tensor) -> torch.Tensor:
        """
        –í—Ö–æ–¥ —Ç–∏–ø–∞ IMAGE –≤ ComfyUI –¥–æ–ª–∂–µ–Ω —É–∂–µ –±—ã—Ç—å BHWC. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–¥–∞—ë–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç.
        """
        if not isinstance(image, torch.Tensor):
            raise RuntimeError("[ImageEnsureRGB] Input 'Image' is not a torch.Tensor")

        if image.ndim != 4:
            raise RuntimeError(
                f"[ImageEnsureRGB] Expected 4D BHWC tensor, got rank={image.ndim} with shape {tuple(image.shape)}"
            )
        b, h, w, c = image.shape
        if min(b, h, w, c) <= 0:
            raise RuntimeError(
                f"[ImageEnsureRGB] Non-positive dimensions in IMAGE shape {tuple(image.shape)}"
            )
        return image

    @staticmethod
    def _split_rgba_to_rgb_mask(
        bhwc: torch.Tensor, alpha_strategy: str
    ) -> Tuple[torch.Tensor, torch.Tensor]:
        """
        –ù–∞ –≤—Ö–æ–¥–µ: BHWC, C ‚àà {1,3,4}
        –í–æ–∑–≤—Ä–∞—Ç: rgb(BHWC, 3ch), mask(BHW)
        """
        b, h, w, c = bhwc.shape
        device = bhwc.device

        if c not in (1, 3, 4):
            raise RuntimeError(
                f"[ImageEnsureRGB] Unsupported channel count C={c}. Allowed C: 1, 3, 4."
            )

        # –ï–¥–∏–Ω–∏—á–Ω–∞—è –º–∞—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ones_mask = torch.ones((b, h, w), dtype=torch.float32, device=device)

        if c == 1:
            rgb = bhwc.repeat(1, 1, 1, 3)
            return rgb, ones_mask

        if c == 3:
            return bhwc, ones_mask

        # c == 4
        rgb = bhwc[..., :3]
        a = bhwc[..., 3]  # shape (B,H,W)

        if alpha_strategy == "to_mask":
            return rgb, a
        elif alpha_strategy == "premultiply":
            rgb = rgb * a.unsqueeze(-1)
            return rgb, ones_mask
        elif alpha_strategy == "drop":
            return rgb, ones_mask
        else:
            raise RuntimeError(
                f"[ImageEnsureRGB] Unknown alpha_strategy: {alpha_strategy}"
            )

    @staticmethod
    def _apply_nan_inf_policy(
        img: torch.Tensor, mask: torch.Tensor, policy: str
    ) -> Tuple[torch.Tensor, torch.Tensor]:
        if policy == "error":
            if not torch.isfinite(img).all():
                mn, mx = ImageEnsureRGB._finite_minmax(img)
                raise RuntimeError(
                    f"[ImageEnsureRGB] NaN/Inf found in IMAGE data. Finite min/max: {mn}..{mx}"
                )
            if not torch.isfinite(mask).all():
                mn, mx = ImageEnsureRGB._finite_minmax(mask)
                raise RuntimeError(
                    f"[ImageEnsureRGB] NaN/Inf found in MASK data. Finite min/max: {mn}..{mx}"
                )
            return img, mask

        # clean
        img = torch.nan_to_num(img, nan=0.0, posinf=0.0, neginf=0.0)
        mask = torch.nan_to_num(mask, nan=0.0, posinf=0.0, neginf=0.0)
        return img, mask

    @staticmethod
    def _apply_normalize(
        img: torch.Tensor, mask: torch.Tensor, mode: str
    ) -> Tuple[torch.Tensor, torch.Tensor]:
        if mode not in ("auto_255", "clip_only", "none"):
            raise RuntimeError(f"[ImageEnsureRGB] Unknown normalize mode: {mode}")

        if mode == "none":
            # –ù–µ —Ç—Ä–æ–≥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (–¥–∏–∞–ø–∞–∑–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º).
            return img, mask

        # –î–ª—è auto_255/clip_only –Ω–∞–º –Ω—É–∂–µ–Ω clamp –≤ [0..1],
        # –Ω–æ –≤ auto_255 –≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 255 –ø–µ—Ä–µ–¥ clamp.
        if mode == "auto_255":
            i_min, i_max = ImageEnsureRGB._finite_minmax(img)
            # –ú—è–≥–∫–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä 0..255: min>=0, max<=255 –∏ P99>1.5 (—Ä–µ–∞–ª—å–Ω–æ –Ω–µ [0..1])
            if not (math.isnan(i_min) or math.isnan(i_max)):
                if (i_min >= 0.0) and (i_max <= 255.0):
                    p99 = ImageEnsureRGB._p99(img)
                    if not math.isnan(p99) and p99 > 1.5:
                        img = img / 255.0

        img = img.clamp(0.0, 1.0)
        mask = mask.clamp(0.0, 1.0)
        return img, mask

    @staticmethod
    def _finalize_types_and_checks(
        img: torch.Tensor, mask: torch.Tensor, mode: str
    ) -> Tuple[torch.Tensor, torch.Tensor]:
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float32 –∏ contiguous
        if img.dtype != torch.float32:
            img = img.float()
        if mask.dtype != torch.float32:
            mask = mask.float()
        img = img.contiguous()
        mask = mask.contiguous()

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã
        if img.ndim != 4 or img.shape[-1] != 3:
            raise RuntimeError(
                f"[ImageEnsureRGB] Final check failed: IMAGE must be [B,H,W,3], got {tuple(img.shape)}"
            )
        if mask.ndim != 3:
            raise RuntimeError(
                f"[ImageEnsureRGB] Final check failed: MASK must be [B,H,W], got {tuple(mask.shape)}"
            )

        # –î–ª—è —Ä–µ–∂–∏–º–æ–≤, –≥–¥–µ –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º [0..1], —É–±–µ–¥–∏–º—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if mode in ("auto_255", "clip_only"):
            if torch.isfinite(img).any():
                mn, mx = ImageEnsureRGB._finite_minmax(img)
                tol = 1e-5
                if mn < -tol or mx > 1.0 + tol:
                    raise RuntimeError(
                        f"[ImageEnsureRGB] Final check failed: IMAGE values out of [0,1]. min={mn}, max={mx}"
                    )
            if torch.isfinite(mask).any():
                mn, mx = ImageEnsureRGB._finite_minmax(mask)
                tol = 1e-5
                if mn < -tol or mx > 1.0 + tol:
                    raise RuntimeError(
                        f"[ImageEnsureRGB] Final check failed: MASK values out of [0,1]. min={mn}, max={mx}"
                    )

        return img, mask

    # ---------- main ----------

    def execute(self, Image, alpha_strategy, normalize, nan_inf_policy):
        try:
            img = self._ensure_bhwc(Image)

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ CPU –∏ —Å float (—Ç–∏–ø IMAGE –≤ ComfyUI –æ–±—ã—á–Ω–æ –∏ —Ç–∞–∫ float32 BHWC)
            if img.device.type != "cpu":
                img = img.to("cpu")
            if not torch.is_floating_point(img):
                img = img.float()

            # –ò–∑–≤–ª–µ—á—å RGB/MASK –ø–æ –∫–∞–Ω–∞–ª–∞–º
            rgb, mask = self._split_rgba_to_rgb_mask(img, alpha_strategy=alpha_strategy)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ NaN/Inf —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–µ (—Å–Ω–∞—á–∞–ª–∞ —á–∏—Å—Ç–∏–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º)
            rgb, mask = self._apply_nan_inf_policy(rgb, mask, policy=nan_inf_policy)

            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            rgb, mask = self._apply_normalize(rgb, mask, mode=normalize)

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: —Ç–∏–ø—ã, contiguous, –ø—Ä–æ–≤–µ—Ä–∫–∏
            rgb, mask = self._finalize_types_and_checks(rgb, mask, mode=normalize)

            return (rgb, mask)

        except RuntimeError:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ
            raise
        except Exception as e:
            raise RuntimeError(f"[ImageEnsureRGB] Unexpected error: {str(e)}") from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"ImageEnsureRGB": ImageEnsureRGB}
NODE_DISPLAY_NAME_MAPPINGS = {"ImageEnsureRGB": "üß© Image Ensure RGB"}
