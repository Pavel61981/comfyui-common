# file: string_json_prompt_parser.py
import json


class StringJsonPromptParser:
    """
    –ù–æ–¥–∞ "StringJsonPromptParser" ‚Äî –ø–∞—Ä—Å–∏—Ç JSON-—Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
    {"photo_type": "__photo_type__", "prompt": "__prompt__"}
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: photo_type –∏ prompt (–æ–±–∞ —Å—Ç—Ä–æ–∫–∏).
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "JSON_String": (
                    "STRING",
                    {
                        "multiline": True,
                        "default": "",
                        "placeholder": '{"photo_type": "...", "prompt": "..."}',
                    },
                ),
            }
        }

    RETURN_TYPES = ("STRING", "STRING")
    RETURN_NAMES = ("photo_type", "prompt")
    FUNCTION = "execute"
    CATEGORY = "utils/json"
    OUTPUT_NODE = False

    def execute(self, JSON_String: str):
        """
        –ü–∞—Ä—Å–∏—Ç JSON_String, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (photo_type, prompt).
        –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç RuntimeError.
        """
        try:
            data = json.loads(JSON_String)
        except Exception as e:
            msg = f"[StringJsonPromptParser] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}"
            print(msg)
            raise RuntimeError(msg) from e

        if not isinstance(data, dict):
            msg = "[StringJsonPromptParser] –û–∂–∏–¥–∞–ª—Å—è JSON-–æ–±—ä–µ–∫—Ç (dict), –ø–æ–ª—É—á–µ–Ω–æ –∏–Ω–æ–µ."
            print(msg)
            raise RuntimeError(msg)

        required_keys = ("photo_type", "prompt")
        for key in required_keys:
            if key not in data:
                msg = f"[StringJsonPromptParser] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á '{key}'."
                print(msg)
                raise RuntimeError(msg)
            if not isinstance(data[key], str):
                msg = f"[StringJsonPromptParser] –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É '{key}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π."
                print(msg)
                raise RuntimeError(msg)

        photo_type = data["photo_type"].strip()
        prompt = data["prompt"].strip()
        return (photo_type, prompt)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {
    "StringJsonPromptParser": StringJsonPromptParser,
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "StringJsonPromptParser": "üß© JSON ‚Üí photo_type & prompt",
}
