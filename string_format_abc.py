import re

class StringFormatABC:
    """
    –ù–æ–¥–∞ "string_format_abc" ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ —à–∞–±–ª–æ–Ω—É —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ {A},{B},{C},{D},{E}.

    –í—Ö–æ–¥—ã:
        - A,B,C,D,E (STRING): —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
        - Template (STRING): —à–∞–±–ª–æ–Ω, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ {A}..{E}.

    –ü—Ä–∞–≤–∏–ª–∞:
        - –†–∞–∑—Ä–µ—à–µ–Ω—ã –¢–û–õ–¨–ö–û {A},{B},{C},{D},{E}.
        - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–∞–ª–∏–¥–Ω—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å.
        - –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä {X}) –∏–ª–∏ –ª–∏—à–Ω–∏–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ ‚Äî –æ—à–∏–±–∫–∞.

    –í—ã—Ö–æ–¥:
        - Result (STRING): —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
    """

    _ALLOWED_KEYS = {"A", "B", "C", "D", "E"}
    _PLACEHOLDER_RE = re.compile(r"\{([A-Z]+)\}")

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "A": ("STRING", {"default": ""}),
                "B": ("STRING", {"default": ""}),
                "C": ("STRING", {"default": ""}),
                "D": ("STRING", {"default": ""}),
                "E": ("STRING", {"default": ""}),
                "Template": ("STRING", {"default": "{A}{B}{C}"}),
            }
        }

    RETURN_TYPES = ("STRING",)
    FUNCTION = "execute"
    CATEGORY = "utils/text"
    OUTPUT_NODE = False

    def _validate_string(self, value, name):
        if not isinstance(value, str):
            raise RuntimeError(f"[string_format_abc] '{name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(value).__name__}")
        return value

    def _validate_template(self, template):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ —à–∞–±–ª–æ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã,
        –∏ —á—Ç–æ –Ω–µ—Ç ¬´–≥–æ–ª—ã—Ö¬ª —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è).
        """
        # –ù–∞–π–¥—ë–º –≤—Å–µ –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–∞ {...}
        matches = list(self._PLACEHOLDER_RE.finditer(template))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        keys = []
        for m in matches:
            key = m.group(1)
            if key not in self._ALLOWED_KEYS:
                raise RuntimeError(f"[string_format_abc] –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä '{{{key}}}' –≤ Template")
            keys.append(key)

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å ¬´–≥–æ–ª—ã—Ö¬ª —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
        # –ó–∞–º–µ–Ω–∏–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ –º–∞—Ä–∫–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Å—Ç–∞—Ç–æ–∫
        tmp = self._PLACEHOLDER_RE.sub("¬ß", template)
        if "{" in tmp or "}" in tmp:
            raise RuntimeError("[string_format_abc] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ Template")

        return keys

    def execute(self, A, B, C, D, E, Template):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ —à–∞–±–ª–æ–Ω—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (Result,).
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤
            A = self._validate_string(A, "A")
            B = self._validate_string(B, "B")
            C = self._validate_string(C, "C")
            D = self._validate_string(D, "D")
            E = self._validate_string(E, "E")
            template = self._validate_string(Template, "Template")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∏ —Å–±–æ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
            _ = self._validate_template(template)

            # –ö–∞—Ä—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
            values = {"A": A, "B": B, "C": C, "D": D, "E": E}

            # –§—É–Ω–∫—Ü–∏—è-–∑–∞–º–µ–Ω–∏—Ç–µ–ª—å –¥–ª—è re.sub
            def replacer(match):
                key = match.group(1)
                return values.get(key, "")

            result = self._PLACEHOLDER_RE.sub(replacer, template)
            return (result,)

        except RuntimeError:
            raise
        except Exception as e:
            msg = f"[string_format_abc] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            print(msg)
            raise RuntimeError(msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"StringFormatABC": StringFormatABC}
NODE_DISPLAY_NAME_MAPPINGS = {"StringFormatABC": "üß© string_format_abc"}
