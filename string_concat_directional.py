class StringConcatDirectional:
    """
    –ù–æ–¥–∞ "string_concat_directional" ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–æ–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∏–ª–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–Ω–æ–≥–æ.

    –í—Ö–æ–¥—ã:
        - Input_Text (STRING): –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –∏–∑ –≥—Ä–∞—Ñ–∞.
        - User_Text  (STRING): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
        - Mode       (CHOICE): "before" | "after" ‚Äî –ø–æ–ª–æ–∂–µ–Ω–∏–µ User_Text.
        - Separator  (STRING): —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±–µ–ª).
        - Trim       (CHOICE): "no" | "both" | "input_only" | "user_only" ‚Äî –æ–±—Ä–µ–∑–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤.
        - Skip_Separator_If_Empty (BOOLEAN): –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç.

    –í—ã—Ö–æ–¥:
        - Result (STRING): —Å–∫–ª–µ–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        - RuntimeError –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ç–∏–ø–∞—Ö –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Input_Text": ("STRING", {"default": ""}),
                "User_Text": ("STRING", {"default": ""}),
                "Mode": (["before", "after"], {"default": "after"}),
                "Separator": ("STRING", {"default": " "}),
                "Trim": (["no", "both", "input_only", "user_only"], {"default": "no"}),
                "Skip_Separator_If_Empty": ("BOOLEAN", {"default": True}),
            }
        }

    RETURN_TYPES = ("STRING",)
    FUNCTION = "execute"
    CATEGORY = "utils/text"
    OUTPUT_NODE = False

    def _validate_str(self, value, name):
        if not isinstance(value, str):
            raise RuntimeError(f"[string_concat_directional] '{name}' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω–æ: {type(value).__name__}")
        return value

    def _apply_trim(self, input_text, user_text, trim_mode):
        if trim_mode == "no":
            return input_text, user_text
        if trim_mode == "both":
            return input_text.strip(), user_text.strip()
        if trim_mode == "input_only":
            return input_text.strip(), user_text
        if trim_mode == "user_only":
            return input_text, user_text.strip()
        # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –¥–æ–ª–∂–µ–Ω —Å–ª—É—á–∏—Ç—å—Å—è –∏–∑-–∑–∞ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞)
        raise RuntimeError(f"[string_concat_directional] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º Trim: {trim_mode}")

    def execute(self, Input_Text, User_Text, Mode, Separator, Trim, Skip_Separator_If_Empty):
        """
        –°–∫–ª–µ–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (Result).
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤
            input_text = self._validate_str(Input_Text, "Input_Text")
            user_text = self._validate_str(User_Text, "User_Text")
            separator = self._validate_str(Separator, "Separator")

            # Trim –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            input_text, user_text = self._apply_trim(input_text, user_text, Trim)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if Skip_Separator_If_Empty:
                need_sep = (len(input_text) > 0) and (len(user_text) > 0)
            else:
                need_sep = True

            sep = separator if need_sep else ""

            # –°–∫–ª–µ–π–∫–∞ –ø–æ —Ä–µ–∂–∏–º—É
            if Mode == "before":
                result = f"{user_text}{sep}{input_text}"
            elif Mode == "after":
                result = f"{input_text}{sep}{user_text}"
            else:
                # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ –≤ UI –Ω–µ –¥–∞—Å—Ç –∏–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                raise RuntimeError(f"[string_concat_directional] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º Mode: {Mode}")

            return (result,)

        except RuntimeError:
            # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —É–∂–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            raise
        except Exception as e:
            msg = f"[string_concat_directional] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            print(msg)
            raise RuntimeError(msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"StringConcatDirectional": StringConcatDirectional}
NODE_DISPLAY_NAME_MAPPINGS = {"StringConcatDirectional": "üß© string_concat_directional"}
