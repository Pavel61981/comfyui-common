# filename: image_is_not_empty.py

import torch


class ImageIsNotEmpty:
    """
    –ù–æ–¥–∞-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä "ImageIsNotEmpty".
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–π IMAGE –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç RuntimeError, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π:
      - None/–Ω–µ tensor/–ø—É—Å—Ç–æ–π —Ç–µ–Ω–∑–æ—Ä/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã,
      - NaN/Inf,
      - –æ–¥–Ω–æ—Ü–≤–µ—Ç–Ω–æ—Å—Ç—å –ø–æ RGB (max-min ‚â§ UNIFORM_TOL),
      - –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–æ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª—É (–µ—Å–ª–∏ RGBA).
    –ü—Ä–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π IMAGE (–ø–∞—Å—Å—Ç—Ä—É), —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ–¥—ã –≤ –≥—Ä–∞—Ñ–µ.
    """

    # –ñ—ë—Å—Ç–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¢–ó)
    CHECK_NULL = True
    CHECK_NAN_INF = True
    CHECK_UNIFORM = True
    UNIFORM_TOL = 1e-5
    CHECK_TRANSPARENT = True
    OPAQUE_RATIO_MIN = 0.01
    ALPHA_EPS = 1e-6

    @classmethod
    def INPUT_TYPES(cls):
        return {"required": {"Image": ("IMAGE",)}}

    # –ü–∞—Å—Å—Ç—Ä—É-–≤—ã—Ö–æ–¥: —Ç–æ—Ç –∂–µ IMAGE
    RETURN_TYPES = ("IMAGE",)
    RETURN_NAMES = ("Image",)
    FUNCTION = "execute"
    CATEGORY = "utils/validation"
    OUTPUT_NODE = False

    # -------- internal helpers --------

    def _raise(self, msg: str):
        """–ü–æ–¥–Ω—è—Ç—å RuntimeError —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –Ω–æ–¥—ã."""
        raise RuntimeError(f"[ImageIsNotEmpty] {msg}")

    def _normalize_image(self, image: torch.Tensor) -> torch.Tensor:
        """
        –ü—Ä–∏–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–µ [B,H,W,C], –µ—Å–ª–∏ –æ–Ω–æ 3D [H,W,C] ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É/–ø–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ–Ω–∑–æ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        """
        if image.dim() == 3:
            image = image.unsqueeze(0)
        return image

    # -------- main --------

    def execute(self, Image):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥–Ω–æ–π IMAGE –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç RuntimeError –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö.
        –ü—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π IMAGE (–ø–∞—Å—Å—Ç—Ä—É), —á—Ç–æ–±—ã –Ω–æ–¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏—Å–ø–æ–ª–Ω—è–ª–∞—Å—å –≤ –≥—Ä–∞—Ñ–µ.
        """
        try:
            # 1) Null / –ø—É—Å—Ç–æ–π –≤—Ö–æ–¥ / –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            if self.CHECK_NULL:
                if Image is None:
                    self._raise("EmptyInput: input is None.")
                if not isinstance(Image, torch.Tensor):
                    self._raise("EmptyInput: expected torch.Tensor of type IMAGE.")
                # –ü—Ä–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö .numel() –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ —Ç–æ–ª—å–∫–æ —É Tensor
                if Image.numel() == 0:
                    self._raise("EmptyInput: tensor has zero elements.")

            img = self._normalize_image(Image)

            if img.dim() != 4:
                self._raise(
                    f"EmptyInput: invalid tensor dims {img.dim()} (expected 4 or 3)."
                )

            b, h, w, c = img.shape
            if b == 0 or h == 0 or w == 0:
                self._raise("EmptyInput: zero batch or spatial dimension.")
            if c not in (3, 4):
                self._raise(
                    f"EmptyInput: invalid channel count C={c} (expected 3 or 4)."
                )

            # 2) –ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º)
            with torch.no_grad():
                for i in range(b):
                    frame = img[i]  # [H,W,C]

                    # 2.1) NaN / Inf
                    if self.CHECK_NAN_INF:
                        # isfinite == not (NaN or +/-Inf)
                        if not torch.isfinite(frame).all():
                            self._raise(f"InvalidNumbers at index {i}: found NaN/Inf.")

                    # 2.2) –û–¥–Ω–æ—Ü–≤–µ—Ç–Ω–æ—Å—Ç—å (RGB)
                    if self.CHECK_UNIFORM:
                        rgb = frame[..., :3].reshape(-1)  # [H*W*3]
                        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø—É—Å—Ç–∞—è –ø–æ –¥–∞–Ω–Ω—ã–º, —Å—é–¥–∞ –±—ã –Ω–µ –¥–æ—à–ª–∏ (numel –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—ã—à–µ)
                        rgb_max = torch.max(rgb)
                        rgb_min = torch.min(rgb)
                        delta = (rgb_max - rgb_min).item()
                        if delta <= self.UNIFORM_TOL:
                            self._raise(
                                f"UniformImage at index {i} (max-min={delta:.2e} ‚â§ tol={self.UNIFORM_TOL:.2e})."
                            )

                    # 2.3) –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ RGBA)
                    if self.CHECK_TRANSPARENT and c == 4:
                        alpha = frame[..., 3].reshape(-1)  # [H*W]
                        threshold = 1.0 - self.ALPHA_EPS
                        # –î–æ–ª—è –ø–∏–∫—Å–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã
                        opaque_ratio = (alpha >= threshold).float().mean().item()
                        if opaque_ratio < self.OPAQUE_RATIO_MIN:
                            self._raise(
                                f"FullyTransparent at index {i} (opaque_ratio={opaque_ratio:.3f} < {self.OPAQUE_RATIO_MIN:.2f})."
                            )

            # –í—Å—ë —Ö–æ—Ä–æ—à–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–Ω–∑–æ—Ä –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–∞—Å—Å—Ç—Ä—É)
            return (Image,)

        except RuntimeError:
            # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã
            raise
        except Exception as e:
            self._raise(f"Unexpected error: {str(e)}")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"ImageIsNotEmpty": ImageIsNotEmpty}
NODE_DISPLAY_NAME_MAPPINGS = {"ImageIsNotEmpty": "üß™ Image: Is Not Empty"}
