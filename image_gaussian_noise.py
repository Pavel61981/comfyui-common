# filename: image_gaussian_noise.py
import torch


class ImageGaussianNoise:
    """
    –ù–æ–¥–∞ "ImageGaussianNoise" ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –≤—Ö–æ–¥–Ω–æ–º—É IMAGE –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–π –≥–∞—É—Å—Å–æ–≤ —à—É–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - Sigma: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —à—É–º–∞ (0..1).
      - Seed: -1 –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—É–º–∞; >=0 –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ (–¥–ª—è –±–∞—Ç—á–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Seed + i).

    –í—Ö–æ–¥:
      - Image: torch.Tensor[B, H, W, 3] —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ [0..1].

    –í—ã—Ö–æ–¥:
      - Noisy_Image: torch.Tensor[B, H, W, 3] —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ [0..1].
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Image": ("IMAGE",),
                "Sigma": (
                    "FLOAT",
                    {"default": 0.10, "min": 0.0, "max": 1.0, "step": 0.01},
                ),
                "Seed": ("INT", {"default": -1, "min": -1, "step": 1}),
            }
        }

    RETURN_TYPES = ("IMAGE",)
    RETURN_NAMES = ("Noisy_Image",)
    FUNCTION = "execute"
    CATEGORY = "utils/noise"
    OUTPUT_NODE = False

    @staticmethod
    def _check_image(image_tensor):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–Ω–∑–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É [B, H, W, 3]."""
        if image_tensor is None:
            raise RuntimeError("[ImageGaussianNoise] –ü—É—Å—Ç–æ–π –≤—Ö–æ–¥ Image")

        if not torch.is_tensor(image_tensor):
            raise RuntimeError("[ImageGaussianNoise] Image –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å torch.Tensor")

        if image_tensor.ndim != 4 or image_tensor.shape[-1] != 3:
            raise RuntimeError(
                f"[ImageGaussianNoise] –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ [B, H, W, 3], –ø–æ–ª—É—á–µ–Ω–æ {tuple(image_tensor.shape)}"
            )

    @staticmethod
    def _make_noise_like(image_tensor, seed):
        """
        –°–æ–∑–¥–∞—ë—Ç —à—É–º —Ç–æ–π –∂–µ —Ñ–æ—Ä–º—ã –∏ –Ω–∞ —Ç–æ–º –∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —á—Ç–æ –∏ image_tensor.
        –ü—Ä–∏ seed >= 0 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—É–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞—Ç—á–∞ c seed + i.
        """
        B, H, W, C = image_tensor.shape
        device = image_tensor.device
        dtype = torch.float32

        if seed is None or seed < 0:
            # –°–ª—É—á–∞–π–Ω—ã–π —à—É–º –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
            return torch.randn((B, H, W, C), device=device, dtype=dtype)

        # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—É–º: –æ—Ç–¥–µ–ª—å–Ω—ã–π seed –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –±–∞—Ç—á–∞
        noise = torch.empty((B, H, W, C), device=device, dtype=dtype)
        for i in range(B):
            g = torch.Generator()  # CPU-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ –≤–µ–∑–¥–µ)
            g.manual_seed(int(seed) + int(i))
            n_i = torch.randn((H, W, C), generator=g, dtype=dtype)
            # –ö–æ–ø–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Ö–æ–¥–∞ (GPU/CPU)
            if device.type != "cpu":
                n_i = n_i.to(device)
            noise[i] = n_i
        return noise

    def execute(self, Image, Sigma, Seed):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≥–∞—É—Å—Å–æ–≤ —à—É–º –∫ Image –∏ –∫–ª–∞–º–ø–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ [0, 1].
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (Noisy_Image,).
        """
        try:
            self._check_image(Image)

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ float32, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            img = Image
            if img.dtype != torch.float32:
                img = img.to(torch.float32)

            sigma = float(Sigma)
            if sigma < 0.0:
                sigma = 0.0
            if sigma == 0.0:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥
                return (img.clone(),)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—É–º–∞
            noise = self._make_noise_like(img, int(Seed))

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—É–º–∞ –∏ –∫–ª–∞–º–ø
            noisy = torch.clamp(img + sigma * noise, 0.0, 1.0)

            return (noisy,)

        except Exception as e:
            msg = f"[ImageGaussianNoise] –û—à–∏–±–∫–∞: {str(e)}"
            print(msg)
            raise RuntimeError(msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"ImageGaussianNoise": ImageGaussianNoise}
NODE_DISPLAY_NAME_MAPPINGS = {"ImageGaussianNoise": "üß© Image Gaussian Noise"}
