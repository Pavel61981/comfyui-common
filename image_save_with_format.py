import os
import torch
import numpy as np
from PIL import Image
import folder_paths


class SaveImageWithFormat:
    """
    –ö–∞—Å—Ç–æ–º–Ω–∞—è –Ω–æ–¥–∞ –¥–ª—è ComfyUI, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–±–µ–∑ –ø–æ—Ç–µ—Ä—å –∏–ª–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ—Ç–µ—Ä—è–º–∏).
    """

    # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    OUTPUT_DIR = folder_paths.get_output_directory()
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    SUPPORTED_FORMATS = ["png", "webp", "tiff", "jpeg"]

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–æ–¥–∞
    CATEGORY = "image"

    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(s):
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ–¥—ã.
        """
        return {
            "required": {
                "image": ("IMAGE",),
                "directory_path": (
                    "STRING",
                    {"default": s.OUTPUT_DIR, "multiline": False},
                ),
                "file_name": ("STRING", {"default": "image_name", "multiline": False}),
                "file_extension": (s.SUPPORTED_FORMATS, {"default": "png"}),
            },
            "optional": {
                "subdirectory_name": ("STRING", {"default": "", "multiline": False}),
            },
        }

    # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    RETURN_TYPES = (
        "IMAGE",
        "STRING",
    )
    # –ò–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    RETURN_NAMES = (
        "image",
        "full_path",
    )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —É –Ω–æ–¥—ã –Ω–µ—Ç –≤—ã–≤–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    OUTPUT_NODE = True

    # –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    FUNCTION = "save_image"

    def save_image(
        self,
        image: torch.Tensor,
        directory_path: str,
        file_name: str,
        file_extension: str,
        subdirectory_name: str = "",
    ):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–æ–¥—ã.
        """
        # --- 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–±–æ—Ä–∫–∞ –ø—É—Ç–∏ ---

        clean_dir = directory_path.strip()
        clean_subdir = subdirectory_name.strip().strip("/\\")
        clean_filename_base = file_name.strip().strip("/\\")

        # base_name, extension = os.path.splitext(clean_filename_base)
        # if extension:
        #     raise ValueError(
        #         f"–ò–º—è —Ñ–∞–π–ª–∞ '{file_name}' –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–º—è."
        #     )

        final_filename = f"{clean_filename_base}.{file_extension}"
        full_path = os.path.join(clean_dir, clean_subdir, final_filename)
        output_dir = os.path.dirname(full_path)
        os.makedirs(output_dir, exist_ok=True)

        # --- 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–Ω–∑–æ—Ä–∞ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---

        single_image = image[0]
        img_array = 255.0 * single_image.cpu().numpy()
        img_array = np.clip(img_array, 0, 255).astype(np.uint8)
        img = Image.fromarray(img_array)

        # --- 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é ---

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç JPEG, –∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (RGBA),
        # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ RGB, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏.
        if file_extension == "jpeg" and img.mode == "RGBA":
            # –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞
            background = Image.new("RGB", img.size, (255, 255, 255))
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å –µ–≥–æ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º) –Ω–∞ –±–µ–ª—ã–π —Ñ–æ–Ω
            background.paste(img, mask=img.split()[3])
            img = background

        # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        save_options = {}
        if file_extension == "png":
            save_options = {
                "compress_level": 6
            }  # –ë—ã—Å—Ç—Ä–æ + –±–µ–∑ –ø–æ—Ç–µ—Ä—å + —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        elif file_extension == "webp":
            save_options = {"lossless": True, "quality": 100}
        elif file_extension == "jpeg":
            save_options = {"quality": 100, "subsampling": 0}
            if img.mode != "RGB":
                img = img.convert("RGB")
        elif file_extension == "tiff":
            save_options = {"compression": "none"}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        try:
            img.save(full_path, **save_options)
        except Exception as e:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        return (
            image,
            full_path,
        )


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI ---
NODE_CLASS_MAPPINGS = {"SaveImageWithFormat": SaveImageWithFormat}
NODE_DISPLAY_NAME_MAPPINGS = {"SaveImageWithFormat": "üíæ Image save with format"}
