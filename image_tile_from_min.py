# class ImageTileFromMin:
#     """
#     –ù–æ–¥–∞ "image_tile_from_min" ‚Äî –≤—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ
#     –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (H/W) —Å —É—á—ë—Ç–æ–º –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞ Max_Tile.
#     –†–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏ –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Ç–µ–Ω 64 –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É.
#     –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –±–∞—Ç—á–∏: –¥–ª—è –±–∞—Ç—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ int –ø–æ –∫–∞–∂–¥–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.
#     """

#     @classmethod
#     def INPUT_TYPES(cls):
#         return {
#             "required": {
#                 "Image": ("IMAGE",),
#                 "Max_Tile": ("INT", {"default": 1024, "step": 64}),
#             }
#         }

#     RETURN_TYPES = ("INT",)
#     FUNCTION = "execute"
#     CATEGORY = "utils/image"
#     OUTPUT_NODE = False

#     def _validate_max_tile(self, max_tile: int) -> None:
#         if max_tile <= 0:
#             raise RuntimeError(
#                 "[image_tile_from_min] Max_Tile –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏ –∫—Ä–∞—Ç–Ω—ã–º 64."
#             )
#         if max_tile % 64 != 0:
#             raise RuntimeError(
#                 "[image_tile_from_min] Max_Tile –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 64. "
#                 f"–ü–æ–ª—É—á–µ–Ω–æ: {max_tile}"
#             )

#     @staticmethod
#     def _shape_of_image(image):
#         """
#         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (batch, height, width, channels) –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ IMAGE.
#         –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö.
#         """
#         # ComfyUI –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç torch.Tensor: [B, H, W, C]
#         # –ù–æ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ shape, –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ torch.
#         try:
#             shape = tuple(image.shape)
#         except Exception as e:
#             raise RuntimeError(
#                 f"[image_tile_from_min] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å shape –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"
#             ) from e

#         if len(shape) != 4:
#             raise RuntimeError(
#                 f"[image_tile_from_min] –û–∂–∏–¥–∞–ª–∞—Å—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å [B,H,W,C], –ø–æ–ª—É—á–µ–Ω–æ: {shape}"
#             )

#         b, h, w, c = shape
#         if not (isinstance(b, int) and isinstance(h, int) and isinstance(w, int) and isinstance(c, int)):
#             # –ë—ã–≤–∞—é—Ç —Ç–µ–Ω–∑–æ—Ä—ã —Å torch.Size, –ø—Ä–∏–≤–µ–¥–µ–º –∫ int —á–µ—Ä–µ–∑ map
#             try:
#                 b, h, w, c = map(int, (b, h, w, c))
#             except Exception:
#                 raise RuntimeError(
#                     f"[image_tile_from_min] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {shape}"
#                 )

#         if h <= 0 or w <= 0:
#             raise RuntimeError(
#                 f"[image_tile_from_min] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: H={h}, W={w}"
#             )

#         return b, h, w, c

#     @staticmethod
#     def _compute_tile_for_min_side(min_side: int, max_tile: int) -> int:
#         """
#         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏.
#         –ë—Ä–æ—Å–∞–µ—Ç RuntimeError, –µ—Å–ª–∏ min_side < 64.
#         """
#         if min_side < 64:
#             raise RuntimeError(
#                 f"[image_tile_from_min] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {min_side} < 64."
#             )

#         limit = min(min_side, max_tile)
#         # –∫—Ä–∞—Ç–Ω–æ 64, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç limit
#         tile = (limit // 64) * 64

#         # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ limit –≤ (64..63)? –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—à–µ,
#         # –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∑–∞—â–∏—Ç—É.
#         if tile < 64:
#             raise RuntimeError(
#                 f"[image_tile_from_min] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫—Ä–∞—Ç–Ω—ã–π 64 —Ä–∞–∑–º–µ—Ä –ø–ª–∏—Ç–∫–∏ "
#                 f"–¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã {min_side} –∏ Max_Tile {max_tile}."
#             )

#         return int(tile)

#     def execute(self, Image, Max_Tile):
#         """
#         –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–ª–∏—Ç–∫–∏.
#         - –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int.
#         - –î–ª—è –±–∞—Ç—á–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ int (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –±–∞—Ç—á–∞).
#         """
#         try:
#             self._validate_max_tile(Max_Tile)
#             b, h, w, _ = self._shape_of_image(Image)

#             # –ï—Å–ª–∏ –±–∞—Ç—á –∏–∑ B –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —É –Ω–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ H/W –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ ComfyUI.
#             # –ù–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–¥—Ä—É (–Ω–∞ —Å–ª—É—á–∞–π –≤–∞—Ä–∏–∞—Ü–∏–π).
#             # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ —Ç–µ–Ω–∑–æ—Ä [B,H,W,C]; H/W –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö,
#             # –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å—Å—á–µ—Ç –ø–æ –æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é min_side –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –¥–ª—è –≤—Å–µ–≥–æ –±–∞—Ç—á–∞.
#             min_side = min(h, w)

#             # –í—ã—á–∏—Å–ª—è–µ–º –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏, –µ—Å–ª–∏ –±–∞—Ç—á, —Ä–∞–∑–º–Ω–æ–∂–∞–µ–º.
#             tile_value = self._compute_tile_for_min_side(min_side, Max_Tile)

#             if b == 1:
#                 return (tile_value,)
#             else:
#                 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞: –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∞–ª—è—Ä–æ–≤ –¥–ª—è –±–∞—Ç—á–∞.
#                 return ([tile_value] * b,)

#         except RuntimeError:
#             # –£–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#             raise
#         except Exception as e:
#             msg = f"[image_tile_from_min] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
#             print(msg)
#             raise RuntimeError(msg) from e


# # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
# NODE_CLASS_MAPPINGS = {"ImageTileFromMin": ImageTileFromMin}
# NODE_DISPLAY_NAME_MAPPINGS = {"ImageTileFromMin": "üß© image_tile_from_min"}
