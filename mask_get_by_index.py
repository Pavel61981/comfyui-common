# filename: mask_get_by_index.py
import re
from typing import Any

try:
    import torch
except Exception as e:
    raise RuntimeError("[mask_get_by_index] ComfyUI requires torch runtime") from e


class MaskGetByIndex:
    """
    üß© Mask Get By Index
    ====================
    –í—ã–±–∏—Ä–∞–µ—Ç **–æ–¥–Ω—É** –º–∞—Å–∫—É –∏–∑ –±–∞—Ç—á–∞ –ø–æ **—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É** –∏–Ω–¥–µ–∫—Å—É.

    –í—Ö–æ–¥—ã:
      ‚Ä¢ Masks_or_Images ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç MASK –∏–ª–∏ IMAGE:
          - MASK: (B,1,H,W) –∏–ª–∏ (B,H,W) –∏–ª–∏ (B,H,W,1) ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –∫ (B,1,H,W)
          - IMAGE: (B,H,W,3) ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –º–∞—Å–∫—É —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ–º –ø–æ –∫–∞–Ω–∞–ª–∞–º ‚Üí (B,1,H,W)
      ‚Ä¢ Index (INT) ‚Äî –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞—Ç—á–∞. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (‚àí1 ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      ‚Ä¢ Binarize_From_Image (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False) ‚Äî –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ IMAGE
      ‚Ä¢ Mask_Threshold (float –≤ [0..1], –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5) ‚Äî –ø–æ—Ä–æ–≥ –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏
      ‚Ä¢ Output_Format ("B1HW" | "BHW" | "HW", –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "B1HW") ‚Äî —Ñ–æ—Ä–º–∞ –≤—ã—Ö–æ–¥–∞
      ‚Ä¢ Index_Adjust (string, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "") ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞:
            "i"     ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π,
            "i+K"   ‚Äî –ø—Ä–∏–±–∞–≤–∏—Ç—å K,
            "i-K"   ‚Äî –≤—ã—á–µ—Å—Ç—å K,
        –ø—Ä–æ–±–µ–ª—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è: "i + 2", "i - 1".
      ‚Ä¢ Strict (bool, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True):
            - –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–Ω–¥–µ–∫—Å–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –±–∞—Ç—á–∞ ‚Äî –æ—à–∏–±–∫–∞; –ø—Ä–∏ Strict=False ‚Äî clamping —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            - –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º Index_Adjust ‚Äî –æ—à–∏–±–∫–∞; –ø—Ä–∏ Strict=False ‚Äî –∏–≥–Ω–æ—Ä c –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º

    –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
      ‚Ä¢ "B1HW" ‚Üí (1,1,H,W)
      ‚Ä¢ "BHW"  ‚Üí (1,H,W)
      ‚Ä¢ "HW"   ‚Üí (H,W)

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
      ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è –º–∞—Å–∫–∏ –∫–ª–∏–ø—É—é—Ç—Å—è –≤ [0,1], dtype ‚Äî float32.
      ‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî (B,1,H,W); –≤—ã–±–æ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å—É —É–º–µ–Ω—å—à–∞–µ—Ç –±–∞—Ç—á –¥–æ 1.
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Masks_or_Images": ("*",),
                "Index": ("INT", {"default": 0, "step": 1}),
            },
            "optional": {
                "Binarize_From_Image": ("BOOLEAN", {"default": False}),
                "Mask_Threshold": (
                    "FLOAT",
                    {"default": 0.5, "min": 0.0, "max": 1.0, "step": 0.01},
                ),
                "Output_Format": (["B1HW", "BHW", "HW"], {"default": "B1HW"}),
                "Index_Adjust": ("STRING", {"default": ""}),
                "Strict": ("BOOLEAN", {"default": True}),
            },
        }

    RETURN_TYPES = ("MASK",)
    RETURN_NAMES = ("Mask",)
    FUNCTION = "execute"
    CATEGORY = "utils/mask"
    OUTPUT_NODE = False

    # ---------- helpers ----------

    @staticmethod
    def _type_name(x: Any) -> str:
        if isinstance(x, torch.Tensor):
            return f"Tensor(shape={tuple(x.shape)})"
        return type(x).__name__

    @staticmethod
    def _is_image(x: Any) -> bool:
        if not isinstance(x, torch.Tensor) or x.dim() != 4:
            return False
        return x.shape[-1] == 3 and x.dtype in (
            torch.float32,
            torch.float64,
            torch.float16,
            torch.bfloat16,
        )

    @staticmethod
    def _is_mask(x: Any) -> bool:
        if not isinstance(x, torch.Tensor):
            return False
        if x.dim() == 3:
            return True  # (B,H,W)
        if x.dim() == 4:
            return x.shape[1] == 1 or x.shape[-1] == 1  # (B,1,H,W) –∏–ª–∏ (B,H,W,1)
        return False

    @staticmethod
    def _to_mask_tensor(x: torch.Tensor) -> torch.Tensor:
        """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å–∫—É –∫ (B,1,H,W), float32, clamp[0,1]."""
        if x.dim() == 3:
            x = x.unsqueeze(1)  # (B,H,W) -> (B,1,H,W)
        elif x.dim() == 4:
            if x.shape[1] == 1:
                pass  # (B,1,H,W)
            elif x.shape[-1] == 1:
                x = x.permute(0, 3, 1, 2)  # (B,H,W,1) -> (B,1,H,W)
            else:
                raise RuntimeError(
                    f"[mask_get_by_index] cannot normalize MASK with shape {tuple(x.shape)}"
                )
        else:
            raise RuntimeError(f"[mask_get_by_index] unexpected mask rank: {x.dim()}")
        if x.dtype != torch.float32:
            x = x.float()
        return torch.clamp(x, 0.0, 1.0)

    @staticmethod
    def _image_to_mask(img: torch.Tensor, binarize: bool, thr: float) -> torch.Tensor:
        """IMAGE(B,H,W,3) -> MASK(B,1,H,W), clamp[0,1], –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è."""
        if not MaskGetByIndex._is_image(img):
            raise RuntimeError(
                f"[mask_get_by_index] expected IMAGE (B,H,W,3), got {MaskGetByIndex._type_name(img)}"
            )
        mask = img.mean(dim=-1)  # (B,H,W)
        mask = mask.unsqueeze(1)  # (B,1,H,W)
        mask = torch.clamp(mask, 0.0, 1.0)
        if binarize:
            mask = (mask >= float(thr)).float()
        return mask

    @staticmethod
    def _apply_index_adjust(i: int, adjust: str, strict: bool) -> int:
        """
        –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–æ–π:
          - "i"     ‚Üí –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          - "i+K"   ‚Üí i + K
          - "i-K"   ‚Üí i - K
        –ü—Ä–æ–±–µ–ª—ã –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        if adjust is None:
            return i
        s = str(adjust).strip()
        if s == "":
            return i
        if re.fullmatch(r"\s*i\s*", s, flags=re.IGNORECASE):
            return i
        m = re.fullmatch(r"\s*i\s*([+-])\s*(\d+)\s*", s, flags=re.IGNORECASE)
        if m:
            sign, num = m.group(1), int(m.group(2))
            return i + num if sign == "+" else i - num
        msg = f'[mask_get_by_index] invalid Index_Adjust "{adjust}". Expected "i", "i+K" or "i-K".'
        if strict:
            raise RuntimeError(msg)
        print("[mask_get_by_index] Warning:", msg, "‚Äî ignored.")
        return i

    @staticmethod
    def _format_output(mask_1b1hw: torch.Tensor, fmt: str) -> torch.Tensor:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥ –ø–æ Output_Format: B1HW|(1,1,H,W), BHW|(1,H,W), HW|(H,W)."""
        if (
            mask_1b1hw.dim() != 4
            or mask_1b1hw.shape[0] != 1
            or mask_1b1hw.shape[1] != 1
        ):
            raise RuntimeError(
                f"[mask_get_by_index] expected (1,1,H,W), got {tuple(mask_1b1hw.shape)}"
            )
        if fmt == "B1HW":
            return mask_1b1hw
        if fmt == "BHW":
            return mask_1b1hw.squeeze(1)  # (1,H,W)
        if fmt == "HW":
            return mask_1b1hw[0, 0, :, :]  # (H,W)
        raise RuntimeError(f"[mask_get_by_index] unknown Output_Format: {fmt}")

    # ---------- execute ----------

    def execute(
        self,
        Masks_or_Images,
        Index,
        Binarize_From_Image=False,
        Mask_Threshold=0.5,
        Output_Format="B1HW",
        Index_Adjust="",
        Strict=True,
    ):
        try:
            # 1) –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥ –∫ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º–µ –º–∞—Å–∫–∏ (B,1,H,W)
            if self._is_mask(Masks_or_Images):
                mask_b1hw = self._to_mask_tensor(Masks_or_Images)
            elif self._is_image(Masks_or_Images):
                mask_b1hw = self._image_to_mask(
                    Masks_or_Images, Binarize_From_Image, Mask_Threshold
                )
            else:
                raise RuntimeError(
                    f"[mask_get_by_index] Masks_or_Images must be MASK or IMAGE, got {self._type_name(Masks_or_Images)}"
                )

            # 2) –ë–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å ‚Äî —É–∂–µ INT
            j = int(Index)

            # 3) –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
            j = self._apply_index_adjust(j, Index_Adjust, Strict)

            # 4) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏ –≤—ã–±–æ—Ä
            B = mask_b1hw.shape[0]
            if j < 0:
                j = B + j  # pythonic negative index
            if j < 0 or j >= B:
                if Strict:
                    raise RuntimeError(
                        f"[mask_get_by_index] index {j} out of range for batch size {B}"
                    )
                # clamp
                j_clamped = max(0, min(B - 1, j))
                if j != j_clamped:
                    print(
                        f"[mask_get_by_index] Warning: index {j} clamped to {j_clamped} for B={B}."
                    )
                j = j_clamped

            # –í—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–∞—Ç—á–∞: (1,1,H,W)
            selected = mask_b1hw[j : j + 1, :, :, :]

            # 5) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
            out = self._format_output(selected, Output_Format)
            return (out,)

        except RuntimeError:
            raise
        except Exception as e:
            raise RuntimeError(f"[mask_get_by_index] unexpected error: {e}") from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã
NODE_CLASS_MAPPINGS = {"MaskGetByIndex": MaskGetByIndex}
NODE_DISPLAY_NAME_MAPPINGS = {"MaskGetByIndex": "üß© Mask Get By Index"}
