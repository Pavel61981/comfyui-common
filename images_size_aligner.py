import torch
import torch.nn.functional as F
import logging

logger = logging.getLogger(__name__)

class ImagesSizeAligner:
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image_a": ("IMAGE",),
                "image_b": ("IMAGE",),
            },
            "optional": {
                "name": ("STRING", {"default": "", "multiline": False}),
            }
        }

    RETURN_TYPES = ("IMAGE", "IMAGE", "INT", "INT")
    RETURN_NAMES = ("image_a_resized", "image_b_resized", "target_width", "target_height")
    FUNCTION = "align"
    CATEGORY = "image/processing"

    def align(self, image_a, image_b, name=""):
        """
        –ü—Ä–∏–≤–æ–¥–∏—Ç –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ä–∞–∑–º–µ—Ä—É.
        –ë–æ–ª—å—à–µ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –º–µ–Ω—å—à–µ–≥–æ.
        –ú–µ–Ω—å—à–µ–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        b1, h1, w1, c1 = image_a.shape
        b2, h2, w2, c2 = image_b.shape

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        if c1 != c2:
            raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {c1} vs {c2}")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (h1, w1) != (h2, w2):
            name_part = f" '{name}'" if name else ""
            logger.warning(
                f"ImagesSizeAligner{name_part}: –†–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî "
                f"image_a: {w1}x{h1}, image_b: {w2}x{h2}. –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∫–∞."
            )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî —Å –º–µ–Ω—å—à–µ–π –ø–ª–æ—â–∞–¥—å—é
        area1 = h1 * w1
        area2 = h2 * w2

        if area1 <= area2:
            target_h, target_w = h1, w1
            # image_a –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            img_a_out = image_a
            # image_b –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—Ä–µ–∑–∞—Ç—å
            img_b_out = self.resize_and_crop(image_b, target_h, target_w)
        else:
            target_h, target_w = h2, w2
            # image_b –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            img_b_out = image_b
            # image_a –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—Ä–µ–∑–∞—Ç—å
            img_a_out = self.resize_and_crop(image_a, target_h, target_w)

        return (img_a_out, img_b_out, target_w, target_h)

    def resize_and_crop(self, image, target_h, target_w):
        """
        –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π, –∑–∞—Ç–µ–º –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É –¥–æ target_h x target_w.
        –í—Ö–æ–¥: —Ç–µ–Ω–∑–æ—Ä [B, H, W, C]
        –í—ã—Ö–æ–¥: —Ç–µ–Ω–∑–æ—Ä [B, target_h, target_w, C]
        """
        b, h, w, c = image.shape

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç [B, C, H, W] –¥–ª—è F.interpolate
        image = image.permute(0, 3, 1, 2)  # [B, C, H, W]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä
        scale_h = target_h / h
        scale_w = target_w / w

        # –í—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π scale, —á—Ç–æ–±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ü–û–ö–†–´–õ–û —Ü–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä (crop-to-fit)
        scale = max(scale_h, scale_w)

        new_h = int(h * scale)
        new_w = int(w * scale)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        resized = F.interpolate(image, size=(new_h, new_w), mode='bilinear', align_corners=False)

        # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        start_h = (new_h - target_h) // 2
        start_w = (new_w - target_w) // 2

        cropped = resized[:, :, start_h:start_h + target_h, start_w:start_w + target_w]

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç [B, H, W, C]
        cropped = cropped.permute(0, 2, 3, 1)

        return cropped

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {
    "ImagesSizeAligner": ImagesSizeAligner
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "ImagesSizeAligner": "üìè Images Size Aligner"
}
