class IntOperation:
    """
    –ù–æ–¥–∞ "Int Operation" ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –¥–≤—É–º—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å).
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –æ–ø–µ—Ä–∞—Ü–∏—è "average" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑).
    –û–ø–µ—Ä–∞—Ü–∏—è "sum" —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º –¥–ª—è "+".
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "Input_A": ("INT", {"default": 0, "step": 1}),  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
                "Input_B": ("INT", {"default": 0, "step": 1}),  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
                "Operation": (
                    ["+", "-", "*", "/", "%", "//", "max", "min", "sum", "average"],
                    {"default": "+"},
                ),
            }
        }

    RETURN_TYPES = ("INT",)
    FUNCTION = "execute"
    CATEGORY = "utils/math"
    OUTPUT_NODE = False

    def execute(self, Input_A, Input_B, Operation):
        try:
            if Operation == "+":
                result = Input_A + Input_B
            elif Operation == "-":
                result = Input_A - Input_B
            elif Operation == "*":
                result = Input_A * Input_B
            elif Operation == "/":
                if Input_B == 0:
                    raise ZeroDivisionError("Division by zero in '/' operation")
                result = int(Input_A / Input_B)
            elif Operation == "%":
                if Input_B == 0:
                    raise ZeroDivisionError("Division by zero in '%' operation")
                result = Input_A % Input_B
            elif Operation == "//":
                if Input_B == 0:
                    raise ZeroDivisionError("Division by zero in '//' operation")
                result = Input_A // Input_B
            elif Operation == "max":
                result = max(Input_A, Input_B)
            elif Operation == "min":
                result = min(Input_A, Input_B)
            elif Operation == "sum":
                result = Input_A + Input_B  # –ê–ª–∏–∞—Å –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è
            elif Operation == "average":
                result = (Input_A + Input_B) // 2  # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
            else:
                raise ValueError(f"Unknown operation: {Operation}")

            return (result,)

        except ZeroDivisionError as e:
            error_msg = f"[Int Operation] Error: {str(e)}"
            print(error_msg)
            raise RuntimeError(error_msg) from e  # ‚Üê –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ø–æ—á–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        except Exception as e:
            error_msg = f"[Int Operation] Unexpected error: {str(e)}"
            print(error_msg)
            raise RuntimeError(error_msg) from e


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–¥—ã –≤ ComfyUI
NODE_CLASS_MAPPINGS = {"IntOperation": IntOperation}

NODE_DISPLAY_NAME_MAPPINGS = {"IntOperation": "üî¢ Int Operation"}
